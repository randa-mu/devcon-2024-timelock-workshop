/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TypesLib {
  export type SignatureRequestStruct = {
    message: BytesLike;
    messageHash: BytesLike;
    condition: BytesLike;
    schemeID: string;
    callback: AddressLike;
  };

  export type SignatureRequestStructOutput = [
    message: string,
    messageHash: string,
    condition: string,
    schemeID: string,
    callback: string
  ] & {
    message: string;
    messageHash: string;
    condition: string;
    schemeID: string;
    callback: string;
  };
}

export interface ISignatureSenderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fulfilSignatureRequest"
      | "getPublicKey"
      | "getPublicKeyBytes"
      | "getRequestInFlight"
      | "isInFlight"
      | "requestSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fulfilSignatureRequest",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKeyBytes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestInFlight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInFlight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSignature",
    values: [string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "fulfilSignatureRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKeyBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestInFlight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInFlight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestSignature",
    data: BytesLike
  ): Result;
}

export interface ISignatureSender extends BaseContract {
  connect(runner?: ContractRunner | null): ISignatureSender;
  waitForDeployment(): Promise<this>;

  interface: ISignatureSenderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fulfilSignatureRequest: TypedContractMethod<
    [requestID: BigNumberish, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getPublicKey: TypedContractMethod<
    [],
    [[[bigint, bigint], [bigint, bigint]]],
    "view"
  >;

  getPublicKeyBytes: TypedContractMethod<[], [string], "view">;

  getRequestInFlight: TypedContractMethod<
    [requestID: BigNumberish],
    [TypesLib.SignatureRequestStructOutput],
    "view"
  >;

  isInFlight: TypedContractMethod<[requestID: BigNumberish], [boolean], "view">;

  requestSignature: TypedContractMethod<
    [schemeID: string, message: BytesLike, condition: BytesLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fulfilSignatureRequest"
  ): TypedContractMethod<
    [requestID: BigNumberish, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPublicKey"
  ): TypedContractMethod<[], [[[bigint, bigint], [bigint, bigint]]], "view">;
  getFunction(
    nameOrSignature: "getPublicKeyBytes"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRequestInFlight"
  ): TypedContractMethod<
    [requestID: BigNumberish],
    [TypesLib.SignatureRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isInFlight"
  ): TypedContractMethod<[requestID: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "requestSignature"
  ): TypedContractMethod<
    [schemeID: string, message: BytesLike, condition: BytesLike],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
