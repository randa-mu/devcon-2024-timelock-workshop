/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace BLS {
  export type PointG2Struct = {
    x: [BigNumberish, BigNumberish];
    y: [BigNumberish, BigNumberish];
  };

  export type PointG2StructOutput = [
    x: [bigint, bigint],
    y: [bigint, bigint]
  ] & { x: [bigint, bigint]; y: [bigint, bigint] };
}

export declare namespace TypesLib {
  export type CiphertextStruct = {
    u: BLS.PointG2Struct;
    v: BytesLike;
    w: BytesLike;
  };

  export type CiphertextStructOutput = [
    u: BLS.PointG2StructOutput,
    v: string,
    w: string
  ] & { u: BLS.PointG2StructOutput; v: string; w: string };
}

export interface SimpleAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionEndBlock"
      | "auctionState"
      | "auctioneer"
      | "bidderToBidID"
      | "bidsById"
      | "depositedReservePrice"
      | "endAuction"
      | "fulfilHighestBid"
      | "getBidWithBidID"
      | "getBidWithBidder"
      | "getHighestBid"
      | "getHighestBidder"
      | "highestBid"
      | "highestBidPaid"
      | "highestBidPaymentDeadlineBlock"
      | "highestBidder"
      | "receiveBlocklock"
      | "reservePrice"
      | "revealBid"
      | "revealedBidsCount"
      | "sealedBid"
      | "timelock"
      | "totalBids"
      | "withdrawDeposit"
      | "withdrawForfeitedDepositFromHighestBidder"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionEnded"
      | "BidUnsealed"
      | "DecryptionKeyReceived"
      | "ForfeitedReserveClaimed"
      | "HighestBidFulfilled"
      | "NewBid"
      | "ReserveClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctioneer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bidderToBidID",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bidsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositedReservePrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfilHighestBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBidWithBidID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidWithBidder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestBidder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidPaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidPaymentDeadlineBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveBlocklock",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealedBidsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sealedBid",
    values: [TypesLib.CiphertextStruct]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalBids", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForfeitedDepositFromHighestBidder",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctioneer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidderToBidID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bidsById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositedReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfilHighestBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidWithBidID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidWithBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "highestBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highestBidPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highestBidPaymentDeadlineBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveBlocklock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealedBidsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sealedBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalBids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForfeitedDepositFromHighestBidder",
    data: BytesLike
  ): Result;
}

export namespace AuctionEndedEvent {
  export type InputTuple = [winner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [winner: string, amount: bigint];
  export interface OutputObject {
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidUnsealedEvent {
  export type InputTuple = [
    bidID: BigNumberish,
    bidder: AddressLike,
    unsealedAmount: BigNumberish
  ];
  export type OutputTuple = [
    bidID: bigint,
    bidder: string,
    unsealedAmount: bigint
  ];
  export interface OutputObject {
    bidID: bigint;
    bidder: string;
    unsealedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionKeyReceivedEvent {
  export type InputTuple = [bidID: BigNumberish, decryptionKey: BytesLike];
  export type OutputTuple = [bidID: bigint, decryptionKey: string];
  export interface OutputObject {
    bidID: bigint;
    decryptionKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForfeitedReserveClaimedEvent {
  export type InputTuple = [auctioneer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [auctioneer: string, amount: bigint];
  export interface OutputObject {
    auctioneer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HighestBidFulfilledEvent {
  export type InputTuple = [bidder: AddressLike, amount: BigNumberish];
  export type OutputTuple = [bidder: string, amount: bigint];
  export interface OutputObject {
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBidEvent {
  export type InputTuple = [
    bidID: BigNumberish,
    bidder: AddressLike,
    sealedAmount: TypesLib.CiphertextStruct
  ];
  export type OutputTuple = [
    bidID: bigint,
    bidder: string,
    sealedAmount: TypesLib.CiphertextStructOutput
  ];
  export interface OutputObject {
    bidID: bigint;
    bidder: string;
    sealedAmount: TypesLib.CiphertextStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveClaimedEvent {
  export type InputTuple = [claimant: AddressLike, amount: BigNumberish];
  export type OutputTuple = [claimant: string, amount: bigint];
  export interface OutputObject {
    claimant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleAuction extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleAuction;
  waitForDeployment(): Promise<this>;

  interface: SimpleAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionEndBlock: TypedContractMethod<[], [bigint], "view">;

  auctionState: TypedContractMethod<[], [bigint], "view">;

  auctioneer: TypedContractMethod<[], [string], "view">;

  bidderToBidID: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  bidsById: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        TypesLib.CiphertextStructOutput,
        string,
        bigint,
        string,
        boolean
      ] & {
        bidID: bigint;
        sealedAmount: TypesLib.CiphertextStructOutput;
        decryptionKey: string;
        unsealedAmount: bigint;
        bidder: string;
        revealed: boolean;
      }
    ],
    "view"
  >;

  depositedReservePrice: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  endAuction: TypedContractMethod<[], [void], "nonpayable">;

  fulfilHighestBid: TypedContractMethod<[], [void], "payable">;

  getBidWithBidID: TypedContractMethod<
    [bidID: BigNumberish],
    [
      [TypesLib.CiphertextStructOutput, string, bigint, string, boolean] & {
        sealedAmount: TypesLib.CiphertextStructOutput;
        decryptionKey: string;
        unsealedAmount: bigint;
        bidder: string;
        revealed: boolean;
      }
    ],
    "view"
  >;

  getBidWithBidder: TypedContractMethod<
    [bidder: AddressLike],
    [
      [TypesLib.CiphertextStructOutput, string, bigint, string, boolean] & {
        sealedAmount: TypesLib.CiphertextStructOutput;
        decryptionKey: string;
        unsealedAmount: bigint;
        _bidder: string;
        revealed: boolean;
      }
    ],
    "view"
  >;

  getHighestBid: TypedContractMethod<[], [bigint], "view">;

  getHighestBidder: TypedContractMethod<[], [string], "view">;

  highestBid: TypedContractMethod<[], [bigint], "view">;

  highestBidPaid: TypedContractMethod<[], [boolean], "view">;

  highestBidPaymentDeadlineBlock: TypedContractMethod<[], [bigint], "view">;

  highestBidder: TypedContractMethod<[], [string], "view">;

  receiveBlocklock: TypedContractMethod<
    [requestID: BigNumberish, decryptionKey: BytesLike],
    [void],
    "nonpayable"
  >;

  reservePrice: TypedContractMethod<[], [bigint], "view">;

  revealBid: TypedContractMethod<
    [requestID: BigNumberish],
    [void],
    "nonpayable"
  >;

  revealedBidsCount: TypedContractMethod<[], [bigint], "view">;

  sealedBid: TypedContractMethod<
    [sealedAmount: TypesLib.CiphertextStruct],
    [bigint],
    "payable"
  >;

  timelock: TypedContractMethod<[], [string], "view">;

  totalBids: TypedContractMethod<[], [bigint], "view">;

  withdrawDeposit: TypedContractMethod<[], [void], "nonpayable">;

  withdrawForfeitedDepositFromHighestBidder: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionEndBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctioneer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bidderToBidID"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bidsById"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        TypesLib.CiphertextStructOutput,
        string,
        bigint,
        string,
        boolean
      ] & {
        bidID: bigint;
        sealedAmount: TypesLib.CiphertextStructOutput;
        decryptionKey: string;
        unsealedAmount: bigint;
        bidder: string;
        revealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositedReservePrice"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "endAuction"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fulfilHighestBid"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getBidWithBidID"
  ): TypedContractMethod<
    [bidID: BigNumberish],
    [
      [TypesLib.CiphertextStructOutput, string, bigint, string, boolean] & {
        sealedAmount: TypesLib.CiphertextStructOutput;
        decryptionKey: string;
        unsealedAmount: bigint;
        bidder: string;
        revealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBidWithBidder"
  ): TypedContractMethod<
    [bidder: AddressLike],
    [
      [TypesLib.CiphertextStructOutput, string, bigint, string, boolean] & {
        sealedAmount: TypesLib.CiphertextStructOutput;
        decryptionKey: string;
        unsealedAmount: bigint;
        _bidder: string;
        revealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHighestBid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHighestBidder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "highestBid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "highestBidPaid"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "highestBidPaymentDeadlineBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "highestBidder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveBlocklock"
  ): TypedContractMethod<
    [requestID: BigNumberish, decryptionKey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reservePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revealBid"
  ): TypedContractMethod<[requestID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealedBidsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sealedBid"
  ): TypedContractMethod<
    [sealedAmount: TypesLib.CiphertextStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "timelock"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalBids"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawDeposit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawForfeitedDepositFromHighestBidder"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AuctionEnded"
  ): TypedContractEvent<
    AuctionEndedEvent.InputTuple,
    AuctionEndedEvent.OutputTuple,
    AuctionEndedEvent.OutputObject
  >;
  getEvent(
    key: "BidUnsealed"
  ): TypedContractEvent<
    BidUnsealedEvent.InputTuple,
    BidUnsealedEvent.OutputTuple,
    BidUnsealedEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionKeyReceived"
  ): TypedContractEvent<
    DecryptionKeyReceivedEvent.InputTuple,
    DecryptionKeyReceivedEvent.OutputTuple,
    DecryptionKeyReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ForfeitedReserveClaimed"
  ): TypedContractEvent<
    ForfeitedReserveClaimedEvent.InputTuple,
    ForfeitedReserveClaimedEvent.OutputTuple,
    ForfeitedReserveClaimedEvent.OutputObject
  >;
  getEvent(
    key: "HighestBidFulfilled"
  ): TypedContractEvent<
    HighestBidFulfilledEvent.InputTuple,
    HighestBidFulfilledEvent.OutputTuple,
    HighestBidFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "NewBid"
  ): TypedContractEvent<
    NewBidEvent.InputTuple,
    NewBidEvent.OutputTuple,
    NewBidEvent.OutputObject
  >;
  getEvent(
    key: "ReserveClaimed"
  ): TypedContractEvent<
    ReserveClaimedEvent.InputTuple,
    ReserveClaimedEvent.OutputTuple,
    ReserveClaimedEvent.OutputObject
  >;

  filters: {
    "AuctionEnded(address,uint256)": TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;
    AuctionEnded: TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;

    "BidUnsealed(uint256,address,uint256)": TypedContractEvent<
      BidUnsealedEvent.InputTuple,
      BidUnsealedEvent.OutputTuple,
      BidUnsealedEvent.OutputObject
    >;
    BidUnsealed: TypedContractEvent<
      BidUnsealedEvent.InputTuple,
      BidUnsealedEvent.OutputTuple,
      BidUnsealedEvent.OutputObject
    >;

    "DecryptionKeyReceived(uint256,bytes)": TypedContractEvent<
      DecryptionKeyReceivedEvent.InputTuple,
      DecryptionKeyReceivedEvent.OutputTuple,
      DecryptionKeyReceivedEvent.OutputObject
    >;
    DecryptionKeyReceived: TypedContractEvent<
      DecryptionKeyReceivedEvent.InputTuple,
      DecryptionKeyReceivedEvent.OutputTuple,
      DecryptionKeyReceivedEvent.OutputObject
    >;

    "ForfeitedReserveClaimed(address,uint256)": TypedContractEvent<
      ForfeitedReserveClaimedEvent.InputTuple,
      ForfeitedReserveClaimedEvent.OutputTuple,
      ForfeitedReserveClaimedEvent.OutputObject
    >;
    ForfeitedReserveClaimed: TypedContractEvent<
      ForfeitedReserveClaimedEvent.InputTuple,
      ForfeitedReserveClaimedEvent.OutputTuple,
      ForfeitedReserveClaimedEvent.OutputObject
    >;

    "HighestBidFulfilled(address,uint256)": TypedContractEvent<
      HighestBidFulfilledEvent.InputTuple,
      HighestBidFulfilledEvent.OutputTuple,
      HighestBidFulfilledEvent.OutputObject
    >;
    HighestBidFulfilled: TypedContractEvent<
      HighestBidFulfilledEvent.InputTuple,
      HighestBidFulfilledEvent.OutputTuple,
      HighestBidFulfilledEvent.OutputObject
    >;

    "NewBid(uint256,address,tuple)": TypedContractEvent<
      NewBidEvent.InputTuple,
      NewBidEvent.OutputTuple,
      NewBidEvent.OutputObject
    >;
    NewBid: TypedContractEvent<
      NewBidEvent.InputTuple,
      NewBidEvent.OutputTuple,
      NewBidEvent.OutputObject
    >;

    "ReserveClaimed(address,uint256)": TypedContractEvent<
      ReserveClaimedEvent.InputTuple,
      ReserveClaimedEvent.OutputTuple,
      ReserveClaimedEvent.OutputObject
    >;
    ReserveClaimed: TypedContractEvent<
      ReserveClaimedEvent.InputTuple,
      ReserveClaimedEvent.OutputTuple,
      ReserveClaimedEvent.OutputObject
    >;
  };
}
